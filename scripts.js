// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
const map = L.map('map').setView([48.0196, 66.9237], 5);
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç—É —Å —ç–º–æ–¥–∂–∏
const locations = [
    { lat: 43.2220, lng: 76.8512, type: 'solar', name: '–°–æ–ª–Ω–µ—á–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–Ω—Ü–∏—è –ê–ª–º–∞—Ç—ã', emoji: '‚òÄÔ∏è' },
    { lat: 51.1605, lng: 71.4704, type: 'wind', name: '–í–µ—Ç—Ä–æ–ø–∞—Ä–∫ –ê—Å—Ç–∞–Ω–∞', emoji: 'üå¨Ô∏è' },
    { lat: 49.9508, lng: 82.6015, type: 'hydro', name: '–ì–≠–° –£—Å—Ç—å-–ö–∞–º–µ–Ω–æ–≥–æ—Ä—Å–∫', emoji: 'üíß' }
];

locations.forEach(loc => {
    L.marker([loc.lat, loc.lng])
        .bindPopup(`${loc.emoji} ${loc.name}`)
        .addTo(map);
});

// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã
document.getElementById('solar-form').addEventListener('submit', (e) => {
    e.preventDefault();
    const area = parseFloat(document.getElementById('solar-area').value);
    const efficiency = parseFloat(document.getElementById('solar-efficiency').value) / 100;

    if (isNaN(area) || isNaN(efficiency)) {
        displayResult('solar-result', "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
        return;
    }

    // –°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è —Å–æ–ª–Ω–µ—á–Ω–∞—è —Ä–∞–¥–∏–∞—Ü–∏—è –¥–ª—è –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ (–∫–í—Ç‚ãÖ—á/–º¬≤/–≥–æ–¥)
    const averageRadiation = 1200;
    const annualEnergy = area * averageRadiation * efficiency;
    displayResult('solar-result', `–û–∂–∏–¥–∞–µ–º–∞—è –≥–æ–¥–æ–≤–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞: ${annualEnergy.toFixed(2)} –∫–í—Ç‚ãÖ—á`);
});

document.getElementById('wind-form').addEventListener('submit', (e) => {
    e.preventDefault();
    const diameter = parseFloat(document.getElementById('wind-diameter').value);
    const speed = parseFloat(document.getElementById('wind-speed').value);
    const efficiency = parseFloat(document.getElementById('wind-efficiency').value) / 100;

    if (isNaN(diameter) || isNaN(speed) || isNaN(efficiency)) {
        displayResult('wind-result', "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
        return;
    }

    const area = Math.PI * Math.pow(diameter / 2, 2);
    const power = 0.5 * 1.225 * area * Math.pow(speed, 3) * efficiency;
    displayResult('wind-result', `–û–∂–∏–¥–∞–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å: ${power.toFixed(2)} –í—Ç`);
});

document.getElementById('hydro-form').addEventListener('submit', function (e) {
    e.preventDefault();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–±—Ä–∞–Ω –ª–∏ —Ä–µ–≥–∏–æ–Ω
    const activeRegion = document.querySelector('.region-btn.active');
    if (!activeRegion) {
        displayResult('hydro-result', "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω");
        return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã –∏ —Ä–µ–≥–∏–æ–Ω–∞
    const regionData = REGIONAL_DATA[activeRegion.dataset.region];
    const height = parseFloat(document.getElementById('hydro-height').value);
    const efficiency = parseFloat(document.getElementById('hydro-efficiency').value) / 100;
    const waterFlow = regionData.waterFlow; // –ë–µ—Ä–µ–º —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (isNaN(height) || isNaN(efficiency)) {
        displayResult('hydro-result', "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ");
        return;
    }

    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    const waterDensity = 1000; // –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–¥—ã (–∫–≥/–º¬≥)
    const gravity = 9.81;      // —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è (–º/—Å¬≤)

    // –†–∞—Å—á–µ—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏
    const power = (waterDensity * gravity * waterFlow * height * efficiency) / 1000; // –∫–í—Ç
    const annualEnergy = calculateAnnualEnergy(power);
    const totalCost = power * ENERGY_COSTS.hydro.installationCost;
    const annualOperationalCost = power * ENERGY_COSTS.hydro.operationalCost;
    const paybackPeriod = calculatePayback(totalCost, annualEnergy);

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    displayResult('hydro-result',
        `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å: ${power.toFixed(2)} –∫–í—Ç\n` +
        `–ì–æ–¥–æ–≤–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞: ${annualEnergy.toFixed(2)} –∫–í—Ç‚ãÖ—á\n` +
        `–†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ: ${waterFlow} –º¬≥/—Å\n` +
        `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${totalCost.toFixed(0)} —Ç–µ–Ω–≥–µ\n` +
        `–ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${(annualEnergy * ELECTRICITY_PRICE).toFixed(0)} —Ç–µ–Ω–≥–µ\n` +
        `–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: ${paybackPeriod.toFixed(1)} –ª–µ—Ç`,
        power,
        annualEnergy
    );
});

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ LCOE –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π (–¥–ª—è –º–∞–ª—ã—Ö —á–∞—Å—Ç–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫)
const ENERGY_COSTS = {
    solar: {
        installationCost: 250000, // —Ç–µ–Ω–≥–µ –∑–∞ –∫–í—Ç (–º–∞–ª—ã–µ —Å–æ–ª–Ω–µ—á–Ω—ã–µ –ø–∞–Ω–µ–ª–∏)
        operationalCost: 5000,    // —Ç–µ–Ω–≥–µ/–≥–æ–¥ –∑–∞ –∫–í—Ç
        lifetime: 25,             // –ª–µ—Ç
        efficiency: 0.15,         // 15%
        minPower: 1,             // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –≤ –∫–í—Ç
        maxPower: 10             // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –≤ –∫–í—Ç –¥–ª—è —á–∞—Å—Ç–Ω–æ–≥–æ –¥–æ–º–∞
    },
    wind: {
        installationCost: 300000, // —Ç–µ–Ω–≥–µ –∑–∞ –∫–í—Ç (–º–∞–ª—ã–µ –≤–µ—Ç—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã)
        operationalCost: 7000,    // —Ç–µ–Ω–≥–µ/–≥–æ–¥ –∑–∞ –∫–í—Ç
        lifetime: 20,             // –ª–µ—Ç
        efficiency: 0.35,         // 35%
        minPower: 0.5,           // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –≤ –∫–í—Ç
        maxPower: 5              // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –≤ –∫–í—Ç –¥–ª—è —á–∞—Å—Ç–Ω–æ–≥–æ –¥–æ–º–∞
    },
    hydro: {
        installationCost: 400000, // —Ç–µ–Ω–≥–µ –∑–∞ –∫–í—Ç (–º–∏–∫—Ä–æ-–ì–≠–°)
        operationalCost: 8000,    // —Ç–µ–Ω–≥–µ/–≥–æ–¥ –∑–∞ –∫–í—Ç
        lifetime: 30,             // –ª–µ—Ç —É–º–µ–Ω—å—à–µ–Ω –¥–ª—è –º–∞–ª—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫
        efficiency: 0.75,         // 75% –¥–ª—è –º–∞–ª—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫
        minPower: 0.3,           // –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –≤ –∫–í—Ç
        maxPower: 3              // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –≤ –∫–í—Ç –¥–ª—è —á–∞—Å—Ç–Ω–æ–≥–æ –¥–æ–º–∞
    }
};

function calculateLCOE(totalCost, annualGeneration, lifetime, operationalCost) {
    const discountRate = 0.05; // 5% —Å—Ç–∞–≤–∫–∞ –¥–∏—Å–∫–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let presentValueCosts = totalCost;
    let presentValueEnergy = 0;

    for (let year = 1; year <= lifetime; year++) {
        presentValueCosts += operationalCost / Math.pow(1 + discountRate, year);
        presentValueEnergy += annualGeneration / Math.pow(1 + discountRate, year);
    }

    return presentValueCosts / presentValueEnergy;
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞
const ELECTRICITY_PRICE = 20; // —Ç–µ–Ω–≥–µ –∑–∞ –∫–í—Ç‚ãÖ—á

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≥–æ–¥–æ–≤–æ–π –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–í—Ç‚ãÖ—á
function calculateAnnualEnergy(power) {
    return power * 24 * 365; // –º–æ—â–Ω–æ—Å—Ç—å * —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å * –¥–Ω–µ–π –≤ –≥–æ–¥—É
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏
function calculatePayback(totalCost, annualEnergy) {
    const annualSavings = annualEnergy * ELECTRICITY_PRICE;
    return totalCost / annualSavings;
}

document.getElementById('solar-form').addEventListener('submit', (e) => {
    e.preventDefault();
    const area = parseFloat(document.getElementById('solar-area').value);
    const efficiency = parseFloat(document.getElementById('solar-efficiency').value) / 100;

    if (isNaN(area) || isNaN(efficiency)) {
        displayResult('solar-result', "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
        return;
    }

    const averageRadiation = 1200; // –∫–í—Ç‚ãÖ—á/–º¬≤/–≥–æ–¥
    const power = area * efficiency; // –∫–í—Ç
    const annualEnergy = calculateAnnualEnergy(power);
    const totalCost = power * ENERGY_COSTS.solar.installationCost;
    const annualOperationalCost = power * ENERGY_COSTS.solar.operationalCost;

    const lcoe = calculateLCOE(totalCost, annualEnergy, ENERGY_COSTS.solar.lifetime, annualOperationalCost);
    const paybackPeriod = calculatePayback(totalCost, annualEnergy);

    displayResult('solar-result',
        `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å: ${power.toFixed(2)} –∫–í—Ç\n` +
        `–ì–æ–¥–æ–≤–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞: ${annualEnergy.toFixed(2)} –∫–í—Ç‚ãÖ—á\n` +
        `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${totalCost.toFixed(0)} —Ç–µ–Ω–≥–µ\n` +
        `LCOE: ${lcoe.toFixed(2)} —Ç–µ–Ω–≥–µ/–∫–í—Ç‚ãÖ—á\n` +
        `–ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${(annualEnergy * ELECTRICITY_PRICE).toFixed(0)} —Ç–µ–Ω–≥–µ\n` +
        `–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: ${paybackPeriod.toFixed(1)} –ª–µ—Ç`,
        power,
        annualEnergy
    );
});

// –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–µ—Ç—Ä–æ–≤–æ–π –∏ –≥–∏–¥—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏
document.getElementById('wind-form').addEventListener('submit', (e) => {
    e.preventDefault();
    const activeRegion = document.querySelector('.region-btn.active').dataset.region;
    const regionData = REGIONAL_DATA[activeRegion];
    const diameter = parseFloat(document.getElementById('wind-diameter').value);
    const efficiency = parseFloat(document.getElementById('wind-efficiency').value) / 100;

    if (isNaN(diameter) || isNaN(efficiency)) {
        displayResult('wind-result', "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
        return;
    }

    const area = Math.PI * Math.pow(diameter / 2, 2);
    const power = (0.5 * 1.225 * area * Math.pow(regionData.windSpeed, 3) * efficiency) / 1000; // –∫–í—Ç
    const annualEnergy = calculateAnnualEnergy(power);
    const totalCost = power * ENERGY_COSTS.wind.installationCost;
    const annualOperationalCost = power * ENERGY_COSTS.wind.operationalCost;
    const paybackPeriod = calculatePayback(totalCost, annualEnergy);

    displayResult('wind-result',
        `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å: ${power.toFixed(2)} –∫–í—Ç\n` +
        `–ì–æ–¥–æ–≤–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞: ${annualEnergy.toFixed(2)} –∫–í—Ç‚ãÖ—á\n` +
        `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${totalCost.toFixed(0)} —Ç–µ–Ω–≥–µ\n` +
        `–ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${(annualEnergy * ELECTRICITY_PRICE).toFixed(0)} —Ç–µ–Ω–≥–µ\n` +
        `–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: ${paybackPeriod.toFixed(1)} –ª–µ—Ç`,
        power,
        annualEnergy
    );
});

document.getElementById('hydro-form').addEventListener('submit', (e) => {
    e.preventDefault();
    const activeRegion = document.querySelector('.region-btn.active').dataset.region;
    const regionData = REGIONAL_DATA[activeRegion];
    const flow = parseFloat(document.getElementById('hydro-flow').value);
    const height = parseFloat(document.getElementById('hydro-height').value);
    const efficiency = parseFloat(document.getElementById('hydro-efficiency').value) / 100;

    if (isNaN(flow) || isNaN(height) || isNaN(efficiency)) {
        displayResult('hydro-result', "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
        return;
    }

    const power = (9.81 * regionData.waterFlow * height * efficiency); // –∫–í—Ç
    const annualEnergy = calculateAnnualEnergy(power);
    const totalCost = power * ENERGY_COSTS.hydro.installationCost;
    const annualOperationalCost = power * ENERGY_COSTS.hydro.operationalCost;
    const paybackPeriod = calculatePayback(totalCost, annualEnergy);

    displayResult('hydro-result',
        `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å: ${power.toFixed(2)} –∫–í—Ç\n` +
        `–ì–æ–¥–æ–≤–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞: ${annualEnergy.toFixed(2)} –∫–í—Ç‚ãÖ—á\n` +
        `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${totalCost.toFixed(0)} —Ç–µ–Ω–≥–µ\n` +
        `–ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${(annualEnergy * ELECTRICITY_PRICE).toFixed(0)} —Ç–µ–Ω–≥–µ\n` +
        `–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: ${paybackPeriod.toFixed(1)} –ª–µ—Ç`,
        power,
        annualEnergy
    );
});

// –ö–≤–∏–∑
const questions = [
    {
        question: '–ö–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Å–æ–ª–Ω–µ—á–Ω–æ–π —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏?',
        answers: ['50%', '70%', '85%', '95%'],
        correct: 2
    },
    {
        question: '–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤–µ—Ç—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:',
        answers: ['2-3 –º/—Å', '4-5 –º/—Å', '6-7 –º/—Å', '8-9 –º/—Å'],
        correct: 2
    },
    {
        question: '–ö–∞–∫–æ–π —Ç–∏–ø –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞–∑–≤–∏—Ç –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç?',
        answers: ['–°–æ–ª–Ω–µ—á–Ω–∞—è', '–í–µ—Ç—Ä–æ–≤–∞—è', '–ì–∏–¥—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞', '–ì–µ–æ—Ç–µ—Ä–º–∞–ª—å–Ω–∞—è'],
        correct: 2
    },
    {
        question: '–ö–∞–∫–æ–π —Ä–µ–≥–∏–æ–Ω –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –∏–º–µ–µ—Ç –Ω–∞–∏–±–æ–ª—å—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–µ—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏?',
        answers: ['–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–î–∂—É–Ω–≥–∞—Ä—Å–∫–∏–µ –≤–æ—Ä–æ—Ç–∞', '–ú–∞–Ω–≥–∏—Å—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ê–∫–º–æ–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'],
        correct: 1
    },
    {
        question: '–°—Ä–µ–¥–Ω–µ–≥–æ–¥–æ–≤–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ —Å–∏—è–Ω–∏—è –≤ —é–∂–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:',
        answers: ['1800-2000 —á–∞—Å–æ–≤', '2200-2400 —á–∞—Å–æ–≤', '2800-3000 —á–∞—Å–æ–≤', '3200-3400 —á–∞—Å–æ–≤'],
        correct: 2
    }
];

let currentQuestion = 0;
let score = 0;

function displayQuestion() {
    const question = questions[currentQuestion];
    document.getElementById('question').textContent = question.question;

    const answersContainer = document.getElementById('answers');
    answersContainer.innerHTML = '';

    question.answers.forEach((answer, index) => {
        const button = document.createElement('button');
        button.className = 'w-full p-2 text-left text-white border border-blue-400 rounded hover:bg-blue-700 transition-colors';
        button.textContent = answer;
        button.onclick = () => checkAnswer(index);
        answersContainer.appendChild(button);
    });
}

function checkAnswer(answerIndex) {
    const question = questions[currentQuestion];
    const buttons = document.querySelectorAll('#answers button');

    buttons.forEach(button => button.disabled = true);

    if (answerIndex === question.correct) {
        buttons[answerIndex].classList.add('bg-green-500');
        score++;
    } else {
        buttons[answerIndex].classList.add('bg-red-500');
        buttons[question.correct].classList.add('bg-green-500');
    }
}

document.getElementById('next-question').addEventListener('click', () => {
    currentQuestion++;
    if (currentQuestion < questions.length) {
        displayQuestion();
    } else {
        showResults();
    }
});

function showResults() {
    const container = document.getElementById('quiz-container');
    container.innerHTML = `
        <h3 class="text-2xl text-white mb-4">–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</h3>
        <p class="text-white">–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score} –∏–∑ ${questions.length}</p>
        <button onclick="resetQuiz()" class="mt-4 bg-blue-500 text-white p-2 rounded hover:bg-blue-600">
            –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        </button>
    `;
}

function resetQuiz() {
    currentQuestion = 0;
    score = 0;
    displayQuestion();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–∏–∑–∞
displayQuestion();

// –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector(this.getAttribute('href')).scrollIntoView({
            behavior: 'smooth'
        });
    });
});

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤
const observers = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
        if (entry.isIntersecting) {
            entry.target.classList.add('opacity-100', 'translate-y-0');
            entry.target.classList.remove('opacity-0', 'translate-y-10');
        }
    });
}, {
    threshold: 0.1
});

document.querySelectorAll('.calculator').forEach(calculator => {
    calculator.classList.add('opacity-0', 'translate-y-10', 'transition-all', 'duration-500');
    observers.observe(calculator);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
function displayResult(elementId, text) {
    const resultElement = document.getElementById(elementId);
    resultElement.textContent = text;
    resultElement.classList.remove('hidden');
    setTimeout(() => {
        resultElement.classList.add('visible');
    }, 10);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
function displayResult(elementId, text, power = null, annualEnergy = null) {
    const resultElement = document.getElementById(elementId);
    let resultText = text;

    if (power !== null && annualEnergy !== null) {
        const solutions = findOptimalSolution(power, annualEnergy);
        if (solutions.length > 0) {
            resultText += '\n\n–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏:\n';
            solutions.forEach(sol => {
                resultText += `${sol.type.toUpperCase()}: –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å ${sol.payback.toFixed(1)} –ª–µ—Ç\n`;
            });
        }
    }

    resultElement.innerHTML = resultText.replace(/\n/g, '<br>');
    resultElement.classList.remove('hidden');
    setTimeout(() => {
        resultElement.classList.add('visible');
    }, 10);
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è
function findOptimalSolution(power, usage) {
    const solutions = [];

    for (const type in ENERGY_COSTS) {
        if (power >= ENERGY_COSTS[type].minPower && power <= ENERGY_COSTS[type].maxPower) {
            const cost = power * ENERGY_COSTS[type].installationCost;
            const annualCost = power * ENERGY_COSTS[type].operationalCost;
            const efficiency = ENERGY_COSTS[type].efficiency;

            solutions.push({
                type: type,
                initialCost: cost,
                annualCost: annualCost,
                efficiency: efficiency,
                payback: cost / (usage * 20) // 20 —Ç–µ–Ω–≥–µ/–∫–í—Ç‚ãÖ—á - —Å—Ä–µ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ
            });
        }
    }

    return solutions.sort((a, b) => a.payback - b.payback);
}

// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
const REGIONAL_DATA = {
    north: {
        name: '–°–µ–≤–µ—Ä–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
        windSpeed: 6.5, // –º/—Å
        waterFlow: 2.1, // –º¬≥/—Å
        solarRadiation: 1100, // –∫–í—Ç‚ãÖ—á/–º¬≤/–≥–æ–¥
        description: '–£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä, —Ö–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –º–∞–ª—ã—Ö –ì–≠–°'
    },
    central: {
        name: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
        windSpeed: 5.8,
        waterFlow: 1.5,
        solarRadiation: 1300,
        description: '–í—ã—Å–æ–∫–∏–π —Å–æ–ª–Ω–µ—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, —Å—Ä–µ–¥–Ω–∏–π –≤–µ—Ç–µ—Ä'
    },
    south: {
        name: '–Æ–∂–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
        windSpeed: 4.2,
        waterFlow: 3.2,
        solarRadiation: 1500,
        description: '–û—Ç–ª–∏—á–Ω—ã–π —Å–æ–ª–Ω–µ—á–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, —Ö–æ—Ä–æ—à–∏–π –≥–∏–¥—Ä–æ–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª'
    },
    east: {
        name: '–í–æ—Å—Ç–æ—á–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
        windSpeed: 5.2,
        waterFlow: 4.5,
        solarRadiation: 1200,
        description: '–í—ã—Å–æ–∫–∏–π –≥–∏–¥—Ä–æ–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, —É–º–µ—Ä–µ–Ω–Ω—ã–π –≤–µ—Ç–µ—Ä'
    },
    west: {
        name: '–ó–∞–ø–∞–¥–Ω—ã–π –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
        windSpeed: 7.2,
        waterFlow: 1.0,
        solarRadiation: 1400,
        description: '–û—Ç–ª–∏—á–Ω—ã–π –≤–µ—Ç—Ä–æ–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª'
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–≥–∏–æ–Ω–∞
function updateRegionalData(region) {
    const data = REGIONAL_DATA[region];

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ö
    if (document.getElementById('wind-speed')) {
        document.getElementById('wind-speed').value = data.windSpeed;
    }
    if (document.getElementById('hydro-flow')) {
        document.getElementById('hydro-flow').value = data.waterFlow;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞
    const regionInfo = document.getElementById('region-info');
    if (regionInfo) {
        regionInfo.innerHTML = `
            <div class="mt-4 p-4 bg-blue-600 rounded-lg">
                <h4 class="font-bold mb-2">${data.name}</h4>
                <p>${data.description}</p>
                <ul class="mt-2">
                    <li>–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${data.windSpeed} –º/—Å</li>
                    <li>–°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã: ${data.waterFlow} –º¬≥/—Å</li>
                    <li>–°–æ–ª–Ω–µ—á–Ω–∞—è —Ä–∞–¥–∏–∞—Ü–∏—è: ${data.solarRadiation} –∫–í—Ç‚ãÖ—á/–º¬≤/–≥–æ–¥</li>
                </ul>
            </div>
        `;
    }
}

// –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º –¥–ª—è —É—á–µ—Ç–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
document.getElementById('solar-form').addEventListener('submit', (e) => {
    e.preventDefault();
    const area = parseFloat(document.getElementById('solar-area').value);
    const efficiency = parseFloat(document.getElementById('solar-efficiency').value) / 100;
    const regionSelect = document.getElementById('region-select');
    const region = regionSelect.value;

    if (isNaN(area) || isNaN(efficiency)) {
        displayResult('solar-result', "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
        return;
    }

    const solarRadiation = REGIONAL_DATA[region].solarRadiation;
    const power = area * efficiency;
    const annualEnergy = calculateAnnualEnergy(power) * (solarRadiation / 1200); // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–∞–¥–∏–∞—Ü–∏—é
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ ...
});

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
document.getElementById('wind-form').addEventListener('submit', (e) => {
    e.preventDefault();
    const activeRegion = document.querySelector('.region-btn.active').dataset.region;
    const regionData = REGIONAL_DATA[activeRegion];
    const diameter = parseFloat(document.getElementById('wind-diameter').value);
    const efficiency = parseFloat(document.getElementById('wind-efficiency').value) / 100;

    if (isNaN(diameter) || isNaN(efficiency)) {
        displayResult('wind-result', "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.");
        return;
    }

    const area = Math.PI * Math.pow(diameter / 2, 2);
    const power = (0.5 * 1.225 * area * Math.pow(regionData.windSpeed, 3) * efficiency) / 1000;
    // ...–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ä–∞—Å—á–µ—Ç–∞...
});

document.getElementById('hydro-form').addEventListener('submit', (e) => {
    e.preventDefault();
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    const activeRegion = document.querySelector('.region-btn.active');
    if (!activeRegion) {
        displayResult('hydro-result', "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω");
        return;
    }

    const regionData = REGIONAL_DATA[activeRegion.dataset.region];
    const height = parseFloat(document.getElementById('hydro-height').value);
    const efficiency = parseFloat(document.getElementById('hydro-efficiency').value) / 100;

    if (isNaN(height) || isNaN(efficiency)) {
        displayResult('hydro-result', "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
        return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞
    const waterFlow = regionData.waterFlow;
    // –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–¥—ã (–∫–≥/–º¬≥) –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è (–º/—Å¬≤)
    const waterDensity = 1000;
    const gravity = 9.81;

    // –†–∞—Å—á–µ—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –≤ –∫–í—Ç
    const power = (waterDensity * gravity * waterFlow * height * efficiency) / 1000;
    const annualEnergy = calculateAnnualEnergy(power);
    const totalCost = power * ENERGY_COSTS.hydro.installationCost;
    const annualOperationalCost = power * ENERGY_COSTS.hydro.operationalCost;
    const paybackPeriod = calculatePayback(totalCost, annualEnergy);

    displayResult('hydro-result',
        `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å: ${power.toFixed(2)} –∫–í—Ç\n` +
        `–ì–æ–¥–æ–≤–∞—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞: ${annualEnergy.toFixed(2)} –∫–í—Ç‚ãÖ—á\n` +
        `–†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –≤ —Ä–µ–≥–∏–æ–Ω–µ: ${waterFlow} –º¬≥/—Å\n` +
        `–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏: ${totalCost.toFixed(0)} —Ç–µ–Ω–≥–µ\n` +
        `–ì–æ–¥–æ–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è: ${(annualEnergy * ELECTRICITY_PRICE).toFixed(0)} —Ç–µ–Ω–≥–µ\n` +
        `–°—Ä–æ–∫ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç–∏: ${paybackPeriod.toFixed(1)} –ª–µ—Ç`,
        power,
        annualEnergy
    );
});

// –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
function selectRegion(region) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.region-btn').forEach(btn => {
        btn.classList.remove('active');
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–µ
    document.querySelector(`[data-region="${region}"]`).classList.add('active');

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω–∞
    const data = REGIONAL_DATA[region];

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ö
    if (document.getElementById('wind-speed')) {
        document.getElementById('wind-speed').value = data.windSpeed;
    }
    if (document.getElementById('hydro-flow')) {
        document.getElementById('hydro-flow').value = data.waterFlow;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏–æ–Ω–µ
    const regionInfo = document.getElementById('region-info');
    regionInfo.innerHTML = `
        <h4 class="text-xl font-bold text-white mb-2">${data.name}</h4>
        <p class="text-gray-200 mb-3">${data.description}</p>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-white">
            <div class="flex items-center gap-2">
                <i class="fas fa-wind text-xl"></i>
                <span>–í–µ—Ç–µ—Ä: ${data.windSpeed} –º/—Å</span>
            </div>
            <div class="flex items-center gap-2">
                <i class="fas fa-water text-xl"></i>
                <span>–†–∞—Å—Ö–æ–¥ –≤–æ–¥—ã: ${data.waterFlow} –º/—Å</span>
            </div>
            <div class="flex items-center gap-2">
                <i class="fas fa-sun text-xl"></i>
                <span>–†–∞–¥–∏–∞—Ü–∏—è: ${data.solarRadiation} –∫–í—Ç‚ãÖ—á/–º¬≤/–≥–æ–¥</span>
            </div>
        </div>
    `;
    regionInfo.classList.remove('hidden');
}

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
document.addEventListener('DOMContentLoaded', () => {
    selectRegion('central');
});
